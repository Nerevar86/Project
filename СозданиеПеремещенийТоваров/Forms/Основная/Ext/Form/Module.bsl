
#Область Переменные

&НаКлиенте
Перем ВыбраннаяНоменклатура;

&НаКлиенте
Перем ВыбраннаяНоменклатураБрак;

#КонецОбласти

#Область СобытияФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Элементы.Настройки.Видимость = РольДоступна("ПолныеПрава");
	ЗагрузитьНастройкиНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ДатаСеанса);
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("Склад", ОсновнойСклад);
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Истина);
	ВыбраннаяНоменклатура = Новый Массив;
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("ВыбраннаяНоменклатура", ВыбраннаяНоменклатура);
	
	СписокБрака.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ДатаСеанса);
	Склады = Новый СписокЗначений;
	Склады.Добавить(ОсновнойСклад);
	Склады.Добавить(СкладПросрочки);
	СписокБрака.Параметры.УстановитьЗначениеПараметра("Склад", Склады);
	СписокБрака.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Истина);
	ВыбраннаяНоменклатураБрак = Новый Массив;
	СписокБрака.Параметры.УстановитьЗначениеПараметра("ВыбраннаяНоменклатура", ВыбраннаяНоменклатураБрак);
	
КонецПроцедуры

#КонецОбласти

#Область СобытияЭлементов

&НаСервереБезКонтекста
Процедура СписокПросрочкиПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ОтформатироватьСтрокиСписка(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокБракаПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	ОтформатироватьСтрокиСписка(Строки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтформатироватьСтрокиСписка(Строки)
	Для Каждого Строка Из Строки Цикл
		Данные = Строка.Значение.Данные;
		Строка.Значение.Данные.СрокГодностиПредставление = СокрЛП(Данные.СрокГодностиПредставление
		+ " " + Строка(Данные.ЕдиницаИзмеренияСрокаГодности))
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СписокПросрочкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбрабткаВыбораИзСписка(Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокБракаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОбрабткаВыбораИзСписка(Элемент, Поле, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура УстановитьПометки(Команда)
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Истина);
	Элементы.СписокПросрочки.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки1(Команда)
	СписокБрака.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Истина);
	Элементы.СписокБрака.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	ВыбраннаяНоменклатура.Очистить();
	СписокПросрочки.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Ложь);
	Элементы.СписокПросрочки.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки1(Команда)
	ВыбраннаяНоменклатураБрак.Очистить();
	СписокБрака.Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Ложь);
	Элементы.СписокБрака.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПеремещение(Команда)
	
	ОформитьПеремещениеНаСервере();
	
	Элементы.СписокПросрочки.Обновить();
	Элементы.СписокБрака.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СнятьПометку(Знач Номенклатура, Знач Список)
	Если Список = "СписокПросрочки" Тогда
		Индекс = ВыбраннаяНоменклатура.Найти(Номенклатура);
		Если Индекс <> Неопределено Тогда
			Если Индекс >= 0 Тогда
				ВыбраннаяНоменклатура.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Индекс = ВыбраннаяНоменклатураБрак.Найти(Номенклатура);
		Если Индекс <> Неопределено Тогда
			Если Индекс >= 0 Тогда
				ВыбраннаяНоменклатураБрак.Удалить(Индекс);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоставитьПометку(Знач Номенклатура, Знач Список)
	Если Список = "СписокПросрочки" Тогда
		Индекс = ВыбраннаяНоменклатура.Найти(Номенклатура);
		Если Индекс = Неопределено Тогда
			ВыбраннаяНоменклатура.Добавить(Номенклатура);
		КонецЕсли;
	Иначе
		Индекс = ВыбраннаяНоменклатураБрак.Найти(Номенклатура);
		Если Индекс = Неопределено Тогда
			ВыбраннаяНоменклатураБрак.Добавить(Номенклатура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОформитьПеремещениеНаСервере()
	
	#Область Просрочка
	Список = "СписокПросрочки";
	ПереместитьНаДругойСклад(Список, ОсновнойСклад, СкладПросрочки);
	#КонецОбласти
	
	#Область Брак
	Список = "СписокБрака";
	ПереместитьНаДругойСклад(Список, ОсновнойСклад, СкладБрака);
	ПереместитьНаДругойСклад(Список, СкладПросрочки, СкладБрака);
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНаДругойСклад(Знач Список, Знач СкладОтправитель, Знач СкладПолучатель)
	
	Таблица = ТаблицаЗначенийЗДинамическогоСписок(Список);
	
	Отбор = Новый Структура("Пометка,Склад", Истина, СкладОтправитель);
	ДанныеПеремещения = Таблица.НайтиСтроки(Отбор);
	
		Если ДанныеПеремещения.Количество() Тогда
		НачатьТранзакцию();
		Попытка
			СписокСвойств = "Номенклатура,Характеристика,Серия,Количество";
			Товары = Таблица.Скопировать(, СписокСвойств);
			Товары.Колонки.Добавить("КоличествоУпаковок", Новый ОписаниеТипов("Число"));
			Товары.Очистить();
			Для Каждого СтрокаДанных Из ДанныеПеремещения Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных, СписокСвойств);
				НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
			КонецЦикла;
			Перемещение = Документы.ПеремещениеТоваров.СоздатьДокумент();
			Перемещение.Дата = ТекущаяДатаСеанса();
			Перемещение.СкладПолучатель = СкладПолучатель;
			
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Склад", СкладОтправитель);
			ДанныеЗаполнения.Вставить("Товары", Товары);
			
			Перемещение.Заполнить(ДанныеЗаполнения);
			Перемещение.Организация = Организация;
			Перемещение.Статус = Перечисления.СтатусыПеремещенийТоваров.Принято;
			Перемещение.Записать(РежимЗаписиДокумента.Проведение);
			
			Текст = СтрШаблон("Создан документ: %1", Перемещение);
			ОбщегоНазначения.СообщитьПользователю(Текст, Перемещение);
			
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("Распоряжение", Перемещение.Ссылка);
			ПараметрыЗаполнения.Вставить("СкладОтравитель", Отбор.Склад);
			ПараметрыЗаполнения.Вставить("СкладПолучатель", СкладБрака);
			
			СоздатьРасходныйОрдерСервер(ПараметрыЗаполнения);
			
			СоздатьПриходныйОрдерСервер(ПараметрыЗаполнения);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ТаблицаЗначенийЗДинамическогоСписок(Знач Список)

	Схема = Элементы[Список].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[Список].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТабЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТабЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат ТабЗначений;
	
КонецФункции

&НаСервере
Процедура СоздатьРасходныйОрдерСервер(Знач ПараметрыЗаполнения)
	
	Распоряжения = Новый Массив;
	Распоряжения.Добавить(ПараметрыЗаполнения.Распоряжение);
	
	СтруктураПараметровСозданияРасходныхОрдеров = СкладыСервер.ПараметрыПереоформленияРасходныхОрдеров();
	СтруктураПараметровСозданияРасходныхОрдеров.Склад = ПараметрыЗаполнения.Отправитель;
	СтруктураПараметровСозданияРасходныхОрдеров.Получатель = ПараметрыЗаполнения.СкладПолучатель;
	СтруктураПараметровСозданияРасходныхОрдеров.РаспоряженияНаОтгрузку = Распоряжения;
	
	Результат = СкладыСервер.ПереоформитьРасходныеОрдера(СтруктураПараметровСозданияРасходныхОрдеров);
	Если Не Результат.ЕстьОшибка И Результат.ОформленныеОрдера.Количество() Тогда
		РасходныеОрдер = Результат.ОформленныеОрдера[0].РасходныйОрдер.ПолучитьОбъект();
		РасходныеОрдер.Статус = Перечисления.СтатусыРасходныхОрдеров.Отгружен;
		
		Документы.РасходныйОрдерНаТовары.ЗаполнитьДействиеВСтроках(РасходныеОрдер);
		
		РасходныеОрдер.Записать(РежимЗаписиДокумента.Проведение); 
		
		Текст = СтрШаблон("Создан документ: %1", РасходныеОрдер);
		ОбщегоНазначения.СообщитьПользователю(Текст, РасходныеОрдер);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПриходныйОрдерСервер(Знач ПараметрыЗаполнения)
	
	Основание = Новый Структура;
	Основание.Вставить("Распоряжение",               ПараметрыЗаполнения.Распоряжение);
	Основание.Вставить("Отправитель",                ПараметрыЗаполнения.СкладОтправитель);
	Основание.Вставить("Склад",                      ПараметрыЗаполнения.СкладПолучатель);
	Основание.Вставить("Помещение",                  Неопределено);
	Основание.Вставить("ЗонаПриемки",                Неопределено);
	Реквизиты = "Дата,Номер";
	ДанныеРаспоряжения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗаполнения.Распоряжение, Реквизиты);
	Основание.Вставить("ДатаВходящегоДокумента",     ДанныеРаспоряжения.Дата);
	Основание.Вставить("НомерВходящегоДокумента",    ПрефиксацияОбъектовКлиентСервер.НомерНаПечать
														(ДанныеРаспоряжения.Номер, Истина, Истина));
	Основание.Вставить("ДатаПоступления",            Дата(1,1,1));
	Основание.Вставить("ХозяйственнаяОперация",      Перечисления.ХозяйственныеОперации.ПеремещениеТоваров);
	
	ПриходныйОрдер = Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
	ПриходныйОрдер.Заполнить(Основание);
	ПриходныйОрдер.Дата = ТекущаяДатаСеанса();
	ПриходныйОрдер.Статус = Перечисления.СтатусыПриходныхОрдеров.Принят;
	Попытка
		ПриходныйОрдер.Записать(РежимЗаписиДокумента.Проведение);
		
		Текст = СтрШаблон("Создан документ: %1", ПриходныйОрдер);
		ОбщегоНазначения.СообщитьПользователю(Текст, ПриходныйОрдер);
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбрабткаВыбораИзСписка(Элемент, Поле, СтандартнаяОбработка)
	
	ИмяСписка = Элемент.Имя;
	Если Поле = Элементы[ИмяСписка + "Пометка"] Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТекущиеДанные.Пометка Тогда
				СнятьПометку(ТекущиеДанные.Серия, ИмяСписка);
			Иначе
				ПоставитьПометку(ТекущиеДанные.Серия, ИмяСписка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСписка = "СписокПросрочки" Тогда
		СписокНоменклатуры = ВыбраннаяНоменклатура;
	Иначе
		СписокНоменклатуры = ВыбраннаяНоменклатураБрак;
	КонецЕсли;
	
	ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ЗначениеПометки", Неопределено);
	ЭтотОбъект[ИмяСписка].Параметры.УстановитьЗначениеПараметра("ВыбраннаяНоменклатура", СписокНоменклатуры);
	
	Элементы[ИмяСписка].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	СохранитьНастройкиНаСервере();
	ПоказатьПредупреждение(, Нстр("ru = 'Выполнено сохранение настроек'"));
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ОсновнойСклад");
	Настройки.Вставить("СкладПросрочки");
	Настройки.Вставить("СкладБрака");
	Настройки.Вставить("Организация");
	Настройки.Вставить("СписокПользователей");
	
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("СозданиеПеремещенийТоваров",, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиНаСервере()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("СозданиеПеремещенийТоваров",);
	Если Настройки <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Настройки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти