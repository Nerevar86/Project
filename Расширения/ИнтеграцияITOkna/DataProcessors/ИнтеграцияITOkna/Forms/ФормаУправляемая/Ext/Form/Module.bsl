
#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОсновноеПодразделение = ОсновноеПодразделение();
	
	ОсновнойСклад = ОсновнойСклад(ОсновноеПодразделение);
	
	Отказ = Не ЗначениеЗаполнено(ОсновноеПодразделение)
	Или Не ЗначениеЗаполнено(ОсновнойСклад);
	
	Если Не (ЗначениеЗаполнено(Период.ДатаНачала) И ЗначениеЗаполнено(Период.ДатаОкончания)) Тогда
		ТекущаяДата = ТекущаяДатаСеанса();
		Период.ДатаНачала = НачалоМесяца(ТекущаяДата);
		Период.ДатаОкончания =КонецМесяца(ТекущаяДата);
	КонецЕсли;
	
	СписокЗаказов1С.Параметры.УстановитьЗначениеПараметра("МассивИд", Новый Массив);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФильтрПриИзменении(Элемент)
		
	ФильтрПриИзмененииКлиент(Фильтр);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура РеализацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.Реализации.ДанныеСтроки(ВыбраннаяСтрока).Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПроизводствоБезЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.ПроизводствоБезЗаказа.ДанныеСтроки(ВыбраннаяСтрока).Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СписокЗаказов1СПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ПриАктивизацииСтрокиСписокЗаказов1С", 0.1, Истина);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УдалитьДокумент(Команда)
	
	ТекущиеДанные = Элементы.СписокЗаказов1С.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекстВопроса = Нстр("ru = 'С выбранным заказом будут удалены и все связанные с ним документы.
		|Продолжить?'");
		
		Обработчик = Новый ОписаниеОповещения("УдалитьДокументЗавершение", ЭтотОбъект, ТекущиеДанные.Ссылка);
		
		ПоказатьВопрос(Обработчик, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	
	УстановитьПометкиКлиент(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(Команда)
	
	УстановитьПометкиКлиент(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЗаказа(Команда)
	
	ИмпортЗаказовКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказ(Команда)
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	Обработчик = Новый ОписаниеОповещения("НастройкиЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Пользователь);
	ПараметрыФормы.Вставить("Пароль", Пароль);
	ПараметрыФормы.Вставить("Каталог", Каталог);
	
	ОткрытьФорму("Обработка.ИнтеграцияITOkna.Форма.Настройки", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокЗаказов(Команда)
	
	СписокЗаказов.Очистить();
	
	ПараметрыПодключения = ПараметрыПодключенияITOkna();
	
	СоединениеITOkna = СоединениеITOkna(ПараметрыПодключения);
	
	Попытка
		СоединениеITOkna.Open();
		ЗапросСписокЗаказовITOkna = ЗапросСписокЗаказовITOkna();
		ВыборкаЗаказыITOkna = СоединениеITOkna.Execute(ЗапросСписокЗаказовITOkna);
		Пока ВыборкаЗаказыITOkna.EOF = 0 Цикл
			СтрокаЗаказ = СписокЗаказов.Добавить();
			СтрокаЗаказ.УникальныйИдентификатор = ВыборкаЗаказыITOkna.Fields("id").value;
			СтрокаЗаказ.Дата = ВыборкаЗаказыITOkna.Fields("docdate").value;
			СтрокаЗаказ.Номер = СокрЛП(Формат(ВыборкаЗаказыITOkna.Fields("docnum").value, "ЧГ=0"));
			СтрокаЗаказ.Клиент = СокрЛП(ВыборкаЗаказыITOkna.Fields("client").value);
			СтрокаЗаказ.СуммаЗаказа = ВыборкаЗаказыITOkna.Fields("amount").value;
			
			ВыборкаЗаказыITOkna.MoveNext();
		КонецЦикла;
		СоединениеITOkna.Close();
	Исключение
		СписокЗаказов.Очистить();
	КонецПопытки;
	
	ЗаполнитьДокументыСервер();
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДокументыСервер()
	
	МассивИд = СписокЗаказов.Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	
	СписокЗаказов1С.Параметры.УстановитьЗначениеПараметра("МассивИд", МассивИд);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслуг.Проведен
	|			ТОГДА 0
	|		КОГДА РеализацияТоваровУслуг.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ИдЗаказаITOkna В(&МассивИд)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдЗаказаITOkna,
	|	РеализацияТоваровУслуг.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("МассивИд", МассивИд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Реализации.Очистить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = Реализации.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводствоБезЗаказа.Ссылка КАК Ссылка,
	|	ПроизводствоБезЗаказа.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
	|	ВЫБОР
	|		КОГДА ПроизводствоБезЗаказа.Проведен
	|			ТОГДА 0
	|		КОГДА ПроизводствоБезЗаказа.ПометкаУдаления
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Картинка
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
	|ГДЕ
	|	ПроизводствоБезЗаказа.ИдЗаказаITOkna В(&МассивИд)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИдЗаказаITOkna,
	|	ПроизводствоБезЗаказа.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("МассивИд", МассивИд);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ПроизводствоБезЗаказа.Очистить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ПроизводствоБезЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.СписокЗаказов1С.Обновить();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПометкиКлиент(ЗначениеПометки)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Не ЗначениеПометки);
	
	НайденныеСтроки = СписокЗаказов.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() Тогда
		Для Каждого Строка Из НайденныеСтроки Цикл
			Строка.Пометка = ЗначениеПометки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервереБезКонтекста
Процедура ЗаполнитьСоответствияКлиентовITOkna(ПараметрыСозданияДокументов)
	
	ТипСтрока400 = ОбщегоНазначения.ОписаниеТипаСтрока(400);
	ТипЧисло10 = ОбщегоНазначения.ОписаниеТипаЧисло(10);
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("ИдДокумента", ТипЧисло10);
	ТаблицаДанных.Колонки.Добавить("Клиент", ТипСтрока400);
	
	Для Каждого СтрокаПараметр Из ПараметрыСозданияДокументов Цикл
		СтрокаДанных = ТаблицаДанных.Добавить();
		СтрокаДанных.ИдДокумента = СтрокаПараметр.Ключ;
		СтрокаДанных.Клиент = СокрЛП(СтрокаПараметр.Значение["Клиент"]);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДанных.ИдДокумента КАК ИдДокумента,
		|	ТаблицаДанных.Клиент КАК Клиент
		|ПОМЕСТИТЬ ТаблицаДанных
		|ИЗ
		|	&ТаблицаДанных КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанных.ИдДокумента КАК ИдДокумента,
		|	ЕСТЬNULL(IT_Okna_СоответствиеКонтрагентов.Партнер1С, ТаблицаДанных.Клиент) КАК Партнер1С
		|ИЗ
		|	ТаблицаДанных КАК ТаблицаДанных
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.IT_Okna_СоответствиеКонтрагентов КАК IT_Okna_СоответствиеКонтрагентов
		|		ПО ТаблицаДанных.Клиент = IT_Okna_СоответствиеКонтрагентов.КонтрагентITOkna";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтруктураПараметров = ПараметрыСозданияДокументов.Получить(Выборка.ИдДокумента);
		СтруктураПараметров.Клиент = Выборка.Партнер1С;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЗаказовКлиент()
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	
	Если Не ЗначениеЗаполнено(Период.ДатаНачала) Или Не ЗначениеЗаполнено(Период.ДатаОкончания) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Указан некорректный период'"),, "Период",, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не выбран организация'"),, "Организация",, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Пометка", Истина);
	
	ВыбранныеСтроки = СписокЗаказов.НайтиСтроки(ПараметрыОтбора);
	Если Не ВыбранныеСтроки.Количество() Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Нстр("ru = 'Не выбран ни один заказ для импорта'"),,,, Отказ);
	КонецЕсли;
	
	
	ПараметрыСозданияДокументов = Новый Соответствие;
	Для Каждого Строка Из ВыбранныеСтроки Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Дата", Строка.Дата);
		СтруктураПараметров.Вставить("Номер", Строка.Номер);
		СтруктураПараметров.Вставить("Клиент", Строка.Клиент);
		СтруктураПараметров.Вставить("Ключ", Строка.УникальныйИдентификатор);
		
		ПараметрыСозданияДокументов.Вставить(Строка.УникальныйИдентификатор, СтруктураПараметров);
		
	КонецЦикла;
	
	ЗаполнитьСоответствияКлиентовITOkna(ПараметрыСозданияДокументов);
	
	МассивНенайденныхКлиентов = Новый Массив;
	Для Каждого Параметр Из ПараметрыСозданияДокументов Цикл
		НайденныйКлиент = Параметр.Значение["Клиент"];
		Если ТипЗнч(НайденныйКлиент) = Тип("Строка") Тогда
			СтруктураПараметров = ПараметрыСозданияДокументов.Получить(Параметр.Ключ);
			МассивНенайденныхКлиентов.Добавить(СтруктураПараметров);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивНенайденныхКлиентов.Количество() Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КонтрагентыITOkna", МассивНенайденныхКлиентов);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПараметрыСозданияДокументов", ПараметрыСозданияДокументов);
		
		Обработчик = Новый ОписаниеОповещения("ВыборСоответствияКонтрагентовЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ИнтеграцияITOkna.Форма.СоответствиеКонтрагентов", ПараметрыФормы, ЭтотОбъект,,,, Обработчик);
		
		Отказ = Истина;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		ИмпортЗаказовКлиентПродолжение(ПараметрыСозданияДокументов);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортЗаказовКлиентПродолжение(ПараметрыСозданияДокументов)
	
	ПодготовитьДанныеДляСозданияДокументов(ПараметрыСозданияДокументов);
	
	НоменклатураБезСоответствий = ПараметрыСозданияДокументов["НоменклатураБезСоответствий"];
	Если ТипЗнч(НоменклатураБезСоответствий) = Тип("Массив") И НоменклатураБезСоответствий.Количество() Тогда
		
		Для Каждого Параметр Из НоменклатураБезСоответствий Цикл
			ПараметрыСозданияДокументов.Удалить(Параметр.ИдДокумента);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("НоменклатураБезСоответствий", НоменклатураБезСоответствий);
		
		ОткрытьФорму("Обработка.ИнтеграцияITOkna.Форма.СоответствиеНоменклатуры", ПараметрыФормы, ЭтотОбъект);
		
		ПараметрыСозданияДокументов.Удалить("НоменклатураБезСоответствий");
		
	КонецЕсли;
	
	Если ПараметрыСозданияДокументов.Количество() Тогда
		
		СоздатьПакетДокументов(ПараметрыСозданияДокументов);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция Изделие()
	
	Изделие = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	СокрЛП(Номенклатура.Код) = &Код
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", "Н0000000005");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Изделие = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Изделие;
	
КонецФункции

&НаСервереБезКонтекста
Функция Стеклопакет()
	
	Изделие = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	СокрЛП(Номенклатура.Код) = &Код
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", "Н0000000009");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Изделие = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Изделие;
	
КонецФункции

&НаСервереБезКонтекста
Функция МоскитнаяСетка()
	
	Изделие = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	СокрЛП(Номенклатура.Код) = &Код
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", "Н0000000013");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Изделие = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Изделие;
	
КонецФункции

&НаСервереБезКонтекста
Функция Материалы()
	
	Изделие = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	СокрЛП(Номенклатура.Код) = &Код
		|	И НЕ Номенклатура.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", "С0000006555");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Изделие = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Изделие;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновноеПодразделение()
	
	ОсновноеПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтруктураПредприятия.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
		|ГДЕ
		|	СтруктураПредприятия.Код = &Код
		|	И НЕ СтруктураПредприятия.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", "000000001");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОсновноеПодразделение = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновноеПодразделение;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОсновнойСклад(ОсновноеПодразделение)
	
	ОсновноеСклад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Склады.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Склады КАК Склады
		|ГДЕ
		|	НРЕГ(Склады.Наименование) = &Наименование
		|	И Склады.Подразделение = &Подразделение
		|	И НЕ Склады.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", "основной склад");
	Запрос.УстановитьПараметр("Подразделение", ОсновноеПодразделение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ОсновнойСклад = Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОсновнойСклад;
	
КонецФункции

&НаСервере
Процедура ПодготовитьДанныеДляСозданияДокументовСервер(ПараметрыСозданияДокументов)
	
	//MSA++
	ТоварыITOkna = СписокТоваров.Выгрузить();
	ТоварыITOkna.Свернуть("УникальныйИдентификатор,Артикул,Наименование,Цена,СуммаСкидки,Спецификация,Декор,Основное", "Количество");
	
	НоменклатураБезСоответствий = Новый Массив;
	Изделие = Изделие();
	Стеклопакет = Стеклопакет();
	МоскитнаяСетка = МоскитнаяСетка();
	Материалы = Материалы();
	
	Для Каждого Параметр Из ПараметрыСозданияДокументов Цикл
		
		СтруктураПараметров = Параметр.Значение;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УникальныйИдентификатор", Параметр.Ключ);
		ПараметрыОтбора.Вставить("Спецификация", Ложь);
		
		НайденныеСтроки = ТоварыITOkna.НайтиСтроки(ПараметрыОтбора);
		ВыходныеИзделия = Новый Массив;
		Товары = Новый Массив;
		Для Каждого Строка Из НайденныеСтроки Цикл
			Номенклатура = Неопределено;
			Если Строка.Наименование = "Изделие" Тогда
				Номенклатура = Изделие;
			ИначеЕсли Строка.Наименование = "Стеклопакет" Тогда
				Номенклатура = Стеклопакет;
			ИначеЕсли Строка.Наименование = "МоскитнаяСетка" Тогда
				Номенклатура = МоскитнаяСетка;
			ИначеЕсли Строка.Наименование = "Материалы" Тогда
				Номенклатура = Материалы;
			Иначе
				СтруктураНоменклатуры = НоменклатураITOkna(Строка.Артикул, Строка.Наименование);
				Номенклатура = СтруктураНоменклатуры.Номенклатура;
				
				Если Не ЗначениеЗаполнено(Номенклатура) Тогда
					
					ПараметрыБезСоответствий = Новый Структура;
					ПараметрыБезСоответствий.Вставить("Заказ",
					СтрШаблон("Заказ № %1 от %2", СтруктураПараметров.Номер,
					Формат(СтруктураПараметров.Дата, "ДФ=dd.MM.yyyy")));
					ПараметрыБезСоответствий.Вставить("Наименование", Строка.Наименование);
					ПараметрыБезСоответствий.Вставить("Артикул", Строка.Артикул);
					ПараметрыБезСоответствий.Вставить("ИдДокумента", Строка.УникальныйИдентификатор);
					
					НоменклатураБезСоответствий.Добавить(ПараметрыБезСоответствий);
					Продолжить;
				КонецЕсли;
				
				Если СтруктураНоменклатуры.НеЗагружать Тогда
					Продолжить;
				КонецЕсли;
				
				//СтрокаТоваров = Новый Структура;
				//СтрокаТоваров.Вставить("Номенклатура", Номенклатура);
				//СтрокаТоваров.Вставить("Цена", Строка.Цена);
				//СтрокаТоваров.Вставить("СуммаСкидки", Строка.СуммаСкидки);
				//СтрокаТоваров.Вставить("Количество", Строка.Количество);
				//Товары.Добавить(СтрокаТоваров);
				//Если Строка.Основное Тогда
				//	ВыходныеИзделия.Добавить(СтрокаТоваров);
				//КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТоваров = Новый Структура;
			СтрокаТоваров.Вставить("Номенклатура", Номенклатура);
			СтрокаТоваров.Вставить("Цена", Строка.Цена);
			СтрокаТоваров.Вставить("СуммаСкидки", Строка.СуммаСкидки);
			СтрокаТоваров.Вставить("Количество", Строка.Количество);
			Товары.Добавить(СтрокаТоваров);
			Если Строка.Основное Тогда
				ВыходныеИзделия.Добавить(СтрокаТоваров);
			КонецЕсли;
				
		КонецЦикла;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УникальныйИдентификатор", Параметр.Ключ);
		ПараметрыОтбора.Вставить("Спецификация", Истина);
		ПараметрыОтбора.Вставить("Декор", Ложь);
		
		Материалы1 = Новый Массив;
		НайденныеМатериалы1 = ТоварыITOkna.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеМатериалы1 Цикл
			СтруктураНоменклатуры = НоменклатураITOkna(Строка.Артикул, Строка.Наименование);
			Номенклатура = СтруктураНоменклатуры.Номенклатура;
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				ПараметрыБезСоответствий = Новый Структура;
				ПараметрыБезСоответствий.Вставить("Заказ",
				СтрШаблон("Заказ № %1 от %2", СтруктураПараметров.Номер,
				Формат(СтруктураПараметров.Дата, "ДФ=dd.MM.yyyy")));
				ПараметрыБезСоответствий.Вставить("Наименование", Строка.Наименование);
				ПараметрыБезСоответствий.Вставить("Артикул", Строка.Артикул);
				ПараметрыБезСоответствий.Вставить("ИдДокумента", Строка.УникальныйИдентификатор);
				НоменклатураБезСоответствий.Добавить(ПараметрыБезСоответствий);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураНоменклатуры.НеЗагружать Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоваров = Новый Структура;
			СтрокаТоваров.Вставить("Номенклатура", Номенклатура);
			СтрокаТоваров.Вставить("Количество", Строка.Количество);
			Материалы1.Добавить(СтрокаТоваров);
		КонецЦикла;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("УникальныйИдентификатор", Параметр.Ключ);
		ПараметрыОтбора.Вставить("Спецификация", Истина);
		ПараметрыОтбора.Вставить("Декор", Истина);
		
		Материалы2 = Новый Массив;
		НайденныеМатериалы2 = ТоварыITOkna.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Строка Из НайденныеМатериалы2 Цикл
			СтруктураНоменклатуры = НоменклатураITOkna(Строка.Артикул, Строка.Наименование);
			Номенклатура = СтруктураНоменклатуры.Номенклатура;
			Если Не ЗначениеЗаполнено(Номенклатура) Тогда
				ПараметрыБезСоответствий = Новый Структура;
				ПараметрыБезСоответствий.Вставить("Заказ",
				СтрШаблон("Заказ № %1 от %2", СтруктураПараметров.Номер,
				Формат(СтруктураПараметров.Дата, "ДФ=dd.MM.yyyy")));
				ПараметрыБезСоответствий.Вставить("Наименование", Строка.Наименование);
				ПараметрыБезСоответствий.Вставить("Артикул", Строка.Артикул);
				ПараметрыБезСоответствий.Вставить("ИдДокумента", Строка.УникальныйИдентификатор);
				НоменклатураБезСоответствий.Добавить(ПараметрыБезСоответствий);
				Продолжить;
			КонецЕсли;
			
			Если СтруктураНоменклатуры.НеЗагружать Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТоваров = Новый Структура;
			СтрокаТоваров.Вставить("Номенклатура", Номенклатура);
			СтрокаТоваров.Вставить("Количество", Строка.Количество);
			Материалы2.Добавить(СтрокаТоваров);
		КонецЦикла;
		
		СтруктураПараметров.Вставить("Товары", Товары);
		СтруктураПараметров.Вставить("ВыходныеИзделия", ВыходныеИзделия);
		СтруктураПараметров.Вставить("Материалы1", Материалы1);
		СтруктураПараметров.Вставить("Материалы2", Материалы2);
	КонецЦикла;
	
	Если НоменклатураБезСоответствий.Количество() Тогда
		ПараметрыСозданияДокументов.Вставить("НоменклатураБезСоответствий", НоменклатураБезСоответствий);
	КонецЕсли;
	
КонецПроцедуры

#Область SQLЗапросыITOkna

&НаКлиенте
Функция СоединениеITOkna(Знач ПараметрыПодключения)
	
	СоединениеИБ = Новый COMОбъект("ADODB.Connection");
	
	СтрокаСоединения = СтрШаблон("Driver={Firebird/InterBase(r) driver};Dialect=3;
	|CHARSET=UTF8; Dbname=%1;Uid=%2;Pwd=%3;Client=gds32.dll",
		ПараметрыПодключения.Каталог,
		ПараметрыПодключения.Пользователь,
		ПараметрыПодключения.Пароль);
	
	СоединениеИБ.ConnectionString = СтрокаСоединения;
	СоединениеИБ.ConnectionTimeout = 60;
	СоединениеИБ.CursorLocation = 3;
	
	Возврат СоединениеИБ;
	
КонецФункции

&НаКлиенте
Функция ЗапросТоварыITOkna(МассивИдентификаторов)
	
	ПараметрИдЗаказа = СтрСоединить(МассивИдентификаторов, ",");
	ПараметрДатаНачала = Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy");
	ПараметрДатаОкончания = Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	ТекстЗапроса = СтрШаблон("select
	|doc_acc_zag.id_doc,
	|0 id_mat,
	|doc_acc_cnt.kol count_mat,
	|doc_acc_cnt.zena_exp price,
	|case
	|when doc_acc_cnt.typ_izd = '2' then 'МоскитнаяСетка'
	|when doc_acc_cnt.typ_izd = '3' then 'Стеклопакет'
	|else
	|'Изделие'
	|end name,
	|doc_acc_cnt.syma amount,
	|doc_acc_cnt.syma_d amount_d,
	|doc_acc_discount.prc percent_d,
	|doc_acc_cnt.syma_wd amount_wd
	|from doc_acc_discount
	|right outer join doc_acc_cnt on (doc_acc_discount.id_doc = doc_acc_cnt.id_doc) and (doc_acc_discount.id_part = 1)
	|right outer join doc_acc_zag on (doc_acc_cnt.id_doc = doc_acc_zag.id_doc)
	|left outer join spr_pred on (doc_acc_zag.id_pred = spr_pred.id_pred)
	|where doc_acc_zag.docdate between '%1'and '%2' and doc_acc_zag.id_doc IN(%3)
	//|order by id_doc
	|union
	|select
	|doc_acc_zag.id_doc,
	|doc_acc_cnt_detals.id_mat,
	|doc_acc_cnt_detals.kol,
	|doc_acc_cnt_detals.zena_exp,
	|spr_mat.name,
	|doc_acc_cnt_detals.syma,
	|doc_acc_cnt_detals.syma_d,
	|0,
	|doc_acc_cnt_detals.syma_wd
	|from doc_acc_zag
	|join doc_acc_cnt_detals on (doc_acc_zag.id_doc = doc_acc_cnt_detals.id_doc)
	|join spr_mat on (doc_acc_cnt_detals.id_mat = spr_mat.id_mat)
	|where doc_acc_zag.docdate between '%1' and '%2'
	|and doc_acc_cnt_detals.id_part = 3 and doc_acc_zag.id_doc IN (%3)
	//|order by id_doc
	|union
	|select
	|z.id_doc,
	|0,
	|1,
	|sum((d.syma) * COALESCE(e.qty,1)),
	|'Материалы',
	|sum((d.syma) * COALESCE(e.qty,1)),
	|sum((d.syma_d) * COALESCE(e.qty,1)),
	|0,
	|sum((d.syma_wd) * COALESCE(e.qty,1))
	|from doc_acc_zag z
	|join doc_acc_cnt_detals d on d.id_doc=z.id_doc
	|left join doc_acc_cnt_elem e on e.id_doc=d.id_doc and e.id_str=d.id_str and e.id_elem=d.id_elem
	|join spr_mat m on m.id_mat=d.id_mat
	|where z.docdate between '%1' and '%2' and z.id_doc IN (%3) and d.id_part = 2
	//|order by id_doc
	|group by  1,2,3",
	ПараметрДатаНачала, ПараметрДатаОкончания, ПараметрИдЗаказа);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция ЗапросСпецификацииITOkna(МассивИдентификаторов)
	
	ПараметрИдЗаказа = СтрСоединить(МассивИдентификаторов, ",");
	ПараметрДатаНачала = Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy");
	ПараметрДатаОкончания = Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy");
	
	ТекстЗапроса = СтрШаблон("select
	|doc_acc_cnt_detals.id_mat,
	|spr_mat.name,
	|COALESCE(doc_acc_cnt.kol,1) kolizd,
	|doc_acc_cnt_detals.kol,
	|COALESCE(doc_acc_cnt_elem.qty,0) kol2,
	|doc_acc_cnt_detals.syma price,
	|doc_acc_cnt_detals.koeff,
	|spr_mat.art,
	|spr_color.name kodcolor,
	|doc_acc_zag.id_doc,
	|COALESCE(spr_mat_tip.id_tip_group,0) type_group
	|from doc_acc_cnt_detals
	|inner join doc_acc_zag on (doc_acc_cnt_detals.id_doc = doc_acc_zag.id_doc)
	|left join doc_acc_cnt on (doc_acc_cnt_detals.id_doc = doc_acc_cnt.id_doc) and (doc_acc_cnt_detals.id_str = doc_acc_cnt.id_str)
	|inner join spr_mat on (doc_acc_cnt_detals.id_mat = spr_mat.id_mat)
	|left join doc_acc_cnt_elem on(doc_acc_cnt_elem.id_doc = doc_acc_cnt_detals.id_doc) and (doc_acc_cnt_elem.id_elem = doc_acc_cnt_detals.id_elem) and (doc_acc_cnt_elem.id_str = doc_acc_cnt_detals.id_str)
	|left join spr_color on (doc_acc_cnt_detals.id_color = spr_color.id_color)
	|left join spr_mat_tip on (spr_mat.id_mat = spr_mat_tip.id_mat) and spr_mat_tip.id_tip_group = 31
	|where doc_acc_zag.docdate between '%1' and
	|'%2' and doc_acc_cnt_detals.id_part in (1,2) and doc_acc_zag.id_doc in(%3)",
	ПараметрДатаНачала, ПараметрДатаОкончания, ПараметрИдЗаказа);
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция ЗапросСписокЗаказовITOkna()
	
	ТекстЗапроса = СтрШаблон("select z.id_doc id, 
	|z.docnum docnum,
	|z.docdate docdate,
	|z.syma amount,
	|p.name client, 
	|d.name department
	|from doc_acc_zag z 
	|left join spr_pred p on p.id_pred = z.id_pred left join spr_deps d on z.depno = d.depno
	|where z.is_fact = 1 and (z.docdate between '%1' and '%2') and p.name <> ''
	|order by docdate,docnum asc",
	Формат(Период.ДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Период.ДатаОкончания, "ДФ=dd.MM.yyyy"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Функция ПараметрыПодключенияITOkna()
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("Пользователь", Пользователь);
	ПараметрыПодключения.Вставить("Пароль", Пароль);
	ПараметрыПодключения.Вставить("Каталог", Каталог);
	
	Возврат ПараметрыПодключения;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция СоздатьИзменитьПроизводствоБезЗаказа(ПараметрыСоздания)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроизводствоБезЗаказа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
		|ГДЕ
		|	ПроизводствоБезЗаказа.ИдЗаказаITOkna = &ИдЗаказаITOkna
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводствоБезЗаказа.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ИдЗаказаITOkna", ПараметрыСоздания.Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ОбъектНаУдаление = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектНаУдаление.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	КонецЕсли;
	
	ПроизводствоБезЗаказаОбъект = Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
	ПроизводствоБезЗаказаОбъект.ИдЗаказаITOkna = ПараметрыСоздания.Ключ;
	ПроизводствоБезЗаказаОбъект.Дата = ТекущаяДатаСеанса();
	
	ПроизводствоБезЗаказаОбъект.Заполнить(Неопределено);
	
	Попытка
		ПроизводствоБезЗаказаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ПроизводствоБезЗаказаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецПопытки;
	
	Возврат ПроизводствоБезЗаказаОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьИзменитьНакладную(ЗаказСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|ГДЕ
		|	РеализацияТоваровУслуг.ЗаказКлиента = &ЗаказКлиента
		|	И РеализацияТоваровУслуг.ИдЗаказаITOkna = &ИдЗаказаITOkna
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеализацияТоваровУслуг.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЗаказКлиента", ЗаказСсылка);
	ИдЗаказаITOkna = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказСсылка, "ИдЗаказаITOkna");
	Запрос.УстановитьПараметр("ИдЗаказаITOkna", ИдЗаказаITOkna);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НакладнаяОбъект = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
		НакладнаяОбъект.ИдЗаказаITOkna = ИдЗаказаITOkna;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		НакладнаяОбъект = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	НакладнаяОбъект.Дата = ТекущаяДатаСеанса();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВариантОформленияПродажи", Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг);
	ДанныеЗаполнения.Вставить("ДокументОснование", ЗаказСсылка);
	
	НакладнаяОбъект.Товары.Очистить();
	НакладнаяОбъект.Заполнить(ДанныеЗаполнения);
	
	Попытка
		НакладнаяОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		НакладнаяОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецПопытки;
	
	Возврат НакладнаяОбъект.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ПодготовитьДанныеДляСозданияДокументов(ПараметрыСозданияДокументов)
	
	СписокТоваров.Очистить();
	
	ПараметрыПодключения = ПараметрыПодключенияITOkna();
	
	СоединениеITOkna = СоединениеITOkna(ПараметрыПодключения);
	
	Попытка
		
		МассивИдентификаторов = Новый Массив;
		Для Каждого Параметр Из ПараметрыСозданияДокументов Цикл
			МассивИдентификаторов.Добавить(Формат(Параметр.Ключ, "ЧГ=0"));
		КонецЦикла;
	
		ЗапросITOkna = ЗапросТоварыITOkna(МассивИдентификаторов);
		
		СоединениеITOkna.Open();
		
		ВыборкаТоварыITOkna = СоединениеITOkna.Execute(ЗапросITOkna);
		
		Пока ВыборкаТоварыITOkna.EOF = 0 Цикл
			
			СтрокаТоваров = СписокТоваров.Добавить();
			СтрокаТоваров.СуммаСкидки = ВыборкаТоварыITOkna.Fields("amount_d").value;
			СтрокаТоваров.Наименование = СокрЛП(ВыборкаТоварыITOkna.Fields("name").value);
			Если СтрокаТоваров.Наименование = "Изделие" Тогда
				СтрокаТоваров.СуммаСкидки = 0;
				СтрокаТоваров.Основное = Истина;
			ИначеЕсли СтрокаТоваров.Наименование = "МоскитнаяСетка" Тогда
				СтрокаТоваров.СуммаСкидки = 0;
				СтрокаТоваров.Основное = Истина;
			ИначеЕсли СтрокаТоваров.Наименование = "Стеклопакет" Тогда
				СтрокаТоваров.СуммаСкидки = 0;
				СтрокаТоваров.Основное = Истина;
			ИначеЕсли СтрокаТоваров.Наименование = "Материалы" Тогда
				СтрокаТоваров.СуммаСкидки = 0;
				СтрокаТоваров.Основное = Ложь;
			Иначе
				СтрокаТоваров.Основное = Ложь;
			КонецЕсли;
			СтрокаТоваров.Артикул = "";
			СтрокаТоваров.Количество = ВыборкаТоварыITOkna.Fields("count_mat").value;
			СтрокаТоваров.Цена = ВыборкаТоварыITOkna.Fields("price").value;
			СтрокаТоваров.УникальныйИдентификатор = ВыборкаТоварыITOkna.Fields("id_doc").value;
			
			ВыборкаТоварыITOkna.MoveNext();
			
		КонецЦикла;
		//--
		ЗапросITOkna = ЗапросСпецификацииITOkna(МассивИдентификаторов);
		
		ВыборкаСпецификацииITOkna = СоединениеITOkna.Execute(ЗапросITOkna);
		
		Пока ВыборкаСпецификацииITOkna.EOF = 0 Цикл
			СтрокаТоваров = СписокТоваров.Добавить();
			СтрокаТоваров.Наименование = СокрЛП(ВыборкаСпецификацииITOkna.Fields("name").value);
			СтрокаТоваров.Артикул = СокрЛП(ВыборкаСпецификацииITOkna.Fields("art").value
			+ ВыборкаСпецификацииITOkna.Fields("kodcolor").value);
			Если ВыборкаСпецификацииITOkna.Fields("kol2").value > 0 Тогда
				СтрокаТоваров.Количество = ВыборкаСпецификацииITOkna.Fields("kolizd").value
				* ВыборкаСпецификацииITOkna.Fields("kol").value
				* ВыборкаСпецификацииITOkna.Fields("kol2").value
				* ВыборкаСпецификацииITOkna.Fields("koeff").value;
			Иначе
				СтрокаТоваров.Количество = ВыборкаСпецификацииITOkna.Fields("kolizd").value
				* ВыборкаСпецификацииITOkna.Fields("kol").value
				* ВыборкаСпецификацииITOkna.Fields("koeff").value;
			КонецЕсли;
			СтрокаТоваров.Цена = ВыборкаСпецификацииITOkna.Fields("price").value;
			//Если СтрокаТоваров.Количество > 0 Тогда
			//	СтрокаТоваров.СуммаСкидки = ВыборкаСпецификацииITOkna.
			//		Fields("amount_d").value/СтрокаТоваров.Количество;
			//КонецЕсли;
			СтрокаТоваров.Декор = ВыборкаСпецификацииITOkna.Fields("type_group").value > 0;
			СтрокаТоваров.Спецификация = Истина;
			СтрокаТоваров.УникальныйИдентификатор = ВыборкаСпецификацииITOkna.Fields("id_doc").value;
			ВыборкаСпецификацииITOkna.MoveNext();
		КонецЦикла;
		СоединениеITOkna.Close();
	Исключение
		СписокТоваров.Очистить();
		Возврат;
	КонецПопытки;
	
	ПодготовитьДанныеДляСозданияДокументовСервер(ПараметрыСозданияДокументов);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПакетДокументов(ПараметрыСозданияДокументов)
	
	Для Каждого Параметр Из ПараметрыСозданияДокументов Цикл
		ЗаказСсылка = СоздатьИзменитьЗаказ(Параметр.Значение);
		НакладнаяСсылка = СоздатьИзменитьНакладную(ЗаказСсылка);
		ОтразитьДокументВРеглУчетеСервер(НакладнаяСсылка);
		ДокументыПроизводства = СоздатьПроизводствоБезЗаказа(Параметр.Значение);
		Для Каждого ДокументПроизводства Из ДокументыПроизводства Цикл
			ОтразитьДокументВРеглУчетеСервер(ДокументПроизводства);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьДокументыСервер();
	
КонецПроцедуры

&НаСервере
Функция СоздатьИзменитьЗаказ(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЗаказКлиента.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.ИдЗаказаITOkna = &ИдЗаказаITOkna
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗаказКлиента.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ИдЗаказаITOkna", СтруктураПараметров.Ключ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		ЗаказОбъект = Документы.ЗаказКлиента.СоздатьДокумент();
		ЗаказОбъект.ИдЗаказаITOkna = СтруктураПараметров.Ключ;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаказОбъект = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	ЗаказОбъект.Дата = ТекущаяДатаСеанса();
	ЗаказОбъект.Номер = СтруктураПараметров.Номер;
	ЗаказОбъект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	ЗаказОбъект.Организация = Организация;
	ЗаказОбъект.Склад = ОсновнойСклад;
	ЗаказОбъект.Подразделение = ОсновноеПодразделение;
	ЗаказОбъект.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаказОбъект.ЦенаВключаетНДС = Истина;
	ЗаказОбъект.Статус = Перечисления.СтатусыЗаказовКлиентов.НеСогласован;
	ЗаказОбъект.Приоритет = Справочники.Приоритеты.НайтиПоНаименованию("Средний");
	ЗаказОбъект.Партнер = СтруктураПараметров.Клиент;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(ЗаказОбъект.Партнер, ЗаказОбъект.Контрагент);
	
	ЗаказОбъект.Договор = ПродажиСервер.ПолучитьДоговорПоУмолчанию(ЗаказОбъект,
	ЗаказОбъект.ХозяйственнаяОперация,
	ЗаказОбъект.Валюта,,
	Ложь
	);
	
	ЗаказОбъект.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗаказОбъект.Договор, "ГруппаФинансовогоУчета");
	
	ПараметрыЗаполнения = Документы.ЗаказКлиента.ПараметрыЗаполненияНалогообложенияНДСПродажи(ЗаказОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСПродажи(ЗаказОбъект.НалогообложениеНДС, ПараметрыЗаполнения);
	
	СтруктураПересчетаСуммы = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЗаказОбъект);
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);
	СтруктураДействий.Вставить("ПересчитатьСумму");
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", Новый Структура("Очищать, ПересчитыватьСуммуРучнойСкидки", Ложь, Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомАвтоматическойСкидки", Новый Структура("Очищать", Ложь));
	СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами");
	
	ЗаказОбъект.Товары.Очистить();
	Для Каждого Строка Из СтруктураПараметров.Товары Цикл
		
		НоваяСтрока = ЗаказОбъект.Товары.Добавить();
		НоваяСтрока.Номенклатура = Строка.Номенклатура;
		НоваяСтрока.Цена = Строка.Цена;
		НоваяСтрока.СуммаРучнойСкидки = Строка.СуммаСкидки;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.КоличествоУпаковок = НоваяСтрока.Количество;
		НоваяСтрока.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.КОбеспечению;
		НоваяСтрока.Подразделение = ЗаказОбъект.Подразделение;
		НоваяСтрока.Склад = ЗаказОбъект.Склад;
		НоваяСтрока.СтавкаНДС = ПредопределенноеЗначение("Справочник.СтавкиНДС.БезНДС");
	КонецЦикла;
	
	//Для Каждого Строка Из ЗаказОбъект.Товары Цикл
	//	Строка.Сумма = Строка.Сумма + Строка.СуммаРучнойСкидки;
	//КонецЦикла;
	
	Если ЗаказОбъект.Товары.Количество() Тогда
		КешируемыеЗначения = ПакетнаяОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
		ПакетнаяОбработкаТабличнойЧастиСервер.ОбработатьТЧ(ЗаказОбъект.Товары, СтруктураДействий, КешируемыеЗначения);
	КонецЕсли;
	
	ПараметрыЗаполнения = ЭтапыОплатыСервер.ПараметрыЗаполненияЭтаповОплаты();
	ПараметрыЗаполнения.ДатаЗаказа = ЗаказОбъект.Дата;
	ПараметрыЗаполнения.СуммаОплаты                     = ЗаказОбъект.СуммаДокумента;
	ПараметрыЗаполнения.СуммаЗалогаЗаТару               = 0;
	ПараметрыЗаполнения.ЭтоРасчетыСКлиентами            = Истина;
	ПараметрыЗаполнения.НакладнаяПоЗаказам              = Ложь;
	ПараметрыЗаполнения.ПорядокРасчетов                 = Перечисления.ПорядокРасчетов.ПоЗаказам;
	ПараметрыЗаполнения.ЭтоЗаказ                        = Истина;
	ПараметрыЗаполнения.НетКонтроляПредоплаты           = Ложь;
	ПараметрыЗаполнения.Соглашение = ЗаказОбъект.Соглашение;
	
	РеквизитыСоглашения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыЗаполнения.Соглашение,
		"СрокПереходаПраваСобственности,Календарь,ГрафикОплаты");
	
	ПараметрыЗаполнения.СрокПереходаПраваСобственности  = РеквизитыСоглашения.СрокПереходаПраваСобственности;
	ПараметрыЗаполнения.Календарь = РеквизитыСоглашения.Календарь;
	ПараметрыЗаполнения.ГрафикОплаты = РеквизитыСоглашения.ГрафикОплаты;
	ПараметрыЗаполнения.ГрафикИсполненияДоговора = Документы.ГрафикИсполненияДоговора.ПустаяСсылка();
	
	ЭтапыГрафикаОплатыТЗ = ЗаказОбъект.ЭтапыГрафикаОплаты.Выгрузить();
	ЭтапыГрафикаОплатыТЗ.Очистить();
	ЭтапыОплатыСервер.ЗаполнитьЭтапыОплаты(ЭтапыГрафикаОплатыТЗ, ПараметрыЗаполнения);
	ЗаказОбъект.ЭтапыГрафикаОплаты.Загрузить(ЭтапыГрафикаОплатыТЗ);
	
	Попытка
		Если ЗаказОбъект.ПометкаУдаления Тогда
			ЗаказОбъект.ПометкаУдаления = Ложь;
			ЗаказОбъект.Записать();
		КонецЕсли;
		ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ЗаказОбъект.Записать();
	КонецПопытки;
	
	Возврат ЗаказОбъект.Ссылка;
	
КонецФункции

&НаСервереБезКонтекста
Функция Клиент(Знач НаименованиеITOkna)
	
	Клиент = Справочники.Партнеры.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	IT_Okna_СоответствиеКонтрагентов.Партнер1С КАК Партнер1С
	|ИЗ
	|	РегистрСведений.IT_Okna_СоответствиеКонтрагентов КАК IT_Okna_СоответствиеКонтрагентов
	|ГДЕ
	|	СОКРЛП(IT_Okna_СоответствиеКонтрагентов.КонтрагентITOkna) = &КонтрагентITOkna";
	
	Запрос.УстановитьПараметр("КонтрагентITOkna", НаименованиеITOkna);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Если Выборка.Следующий() Тогда
			Клиент = Выборка.Партнер1С;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Клиент;
	
КонецФункции

&НаСервере
Функция СоздатьПроизводствоБезЗаказа(СтруктураПараметров)
	
	Производство = Новый Массив;
	
	Материалы1 = Неопределено;
	
	Материалы2 = Неопределено;
	
	Если СтруктураПараметров.Свойство("Материалы1") Тогда
		Материалы1 = СтруктураПараметров.Материалы1;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("Материалы2") Тогда
		Материалы2 = СтруктураПараметров.Материалы2;
	КонецЕсли;
	
	Если Материалы1 = Неопределено И Материалы2 = Неопределено Тогда
		Возврат Производство;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИдЗаказаITOkna", СтруктураПараметров.Ключ);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПроизводствоБезЗаказа.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
	|ГДЕ
	|	ПроизводствоБезЗаказа.ИдЗаказаITOkna = &ИдЗаказаITOkna
	|	И НЕ ПроизводствоБезЗаказа.ПометкаУдаления";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ДокументОбъект.Записать();
	КонецЦикла;

	СтатьяКалькуляции = СтатьяКалькуляции();
	
	Если Материалы1 <> Неопределено Тогда
		
		ПроизводствоБезЗаказаОбъект = Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
		ПроизводствоБезЗаказаОбъект.Заполнить(Неопределено);
		ПроизводствоБезЗаказаОбъект.Организация = Организация;
		ПроизводствоБезЗаказаОбъект.Подразделение = ОсновноеПодразделение;
		ПроизводствоБезЗаказаОбъект.Дата = ТекущаяДатаСеанса();
		ПроизводствоБезЗаказаОбъект.ИдЗаказаITOkna = СтруктураПараметров.Ключ;
		
		Для Каждого Строка Из СтруктураПараметров.ВыходныеИзделия Цикл
			СтрокаИзделие = ПроизводствоБезЗаказаОбъект.ВыходныеИзделия.Добавить();
			СтрокаИзделие.Номенклатура = Строка.Номенклатура;
			СтрокаИзделие.Количество = Строка.Количество;
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.Количество;
			СтрокаИзделие.Подразделение = ПроизводствоБезЗаказаОбъект.Подразделение;
			СтрокаИзделие.Получатель = ОсновнойСклад;
			СтрокаИзделие.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			СтрокаИзделие.НомерГруппыЗатрат = 1;
		КонецЦикла;
		
		Для Каждого Строка Из СтруктураПараметров.Материалы1 Цикл
			СтрокаМатериалы = ПроизводствоБезЗаказаОбъект.МатериалыИРаботы.Добавить();
			СтрокаМатериалы.Номенклатура = Строка.Номенклатура;
			СтрокаМатериалы.Подразделение = ОсновноеПодразделение;
			СтрокаМатериалы.Склад = ОсновнойСклад;
			СтрокаМатериалы.Количество = Строка.Количество;
			СтрокаМатериалы.КоличествоУпаковок = СтрокаМатериалы.Количество;
			СтрокаМатериалы.СтатьяКалькуляции = СтатьяКалькуляции;
			СтрокаМатериалы.НомерГруппыЗатрат = 1;
		КонецЦикла;
		
		Попытка
			ПроизводствоБезЗаказаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ПроизводствоБезЗаказаОбъект.Записать();
		КонецПопытки;
		Производство.Добавить(ПроизводствоБезЗаказаОбъект.Ссылка);
	КонецЕсли;
	
	Если Материалы2 <> Неопределено Тогда
		
		ПроизводствоБезЗаказаОбъект = Документы.ПроизводствоБезЗаказа.СоздатьДокумент();
		ПроизводствоБезЗаказаОбъект.Заполнить(Неопределено);
		ПроизводствоБезЗаказаОбъект.Организация = Организация;
		ПроизводствоБезЗаказаОбъект.Подразделение = ОсновноеПодразделение;
		ПроизводствоБезЗаказаОбъект.Дата = ТекущаяДатаСеанса();
		ПроизводствоБезЗаказаОбъект.ИдЗаказаITOkna = СтруктураПараметров.Ключ;
		
		Для Каждого Строка Из СтруктураПараметров.ВыходныеИзделия Цикл
			СтрокаИзделие = ПроизводствоБезЗаказаОбъект.ВыходныеИзделия.Добавить();
			СтрокаИзделие.Номенклатура = Строка.Номенклатура;
			СтрокаИзделие.Количество = Строка.Количество;
			СтрокаИзделие.КоличествоУпаковок = СтрокаИзделие.Количество;
			СтрокаИзделие.Подразделение = ПроизводствоБезЗаказаОбъект.Подразделение;
			СтрокаИзделие.Получатель = ОсновнойСклад;
			СтрокаИзделие.НаправлениеВыпуска = Перечисления.ХозяйственныеОперации.ВыпускПродукцииНаСклад;
			СтрокаИзделие.НомерГруппыЗатрат = 1;
		КонецЦикла;
		
		Для Каждого Строка Из СтруктураПараметров.Материалы2 Цикл
			СтрокаМатериалы = ПроизводствоБезЗаказаОбъект.МатериалыИРаботы.Добавить();
			СтрокаМатериалы.Номенклатура = Строка.Номенклатура;
			СтрокаМатериалы.Подразделение = ОсновноеПодразделение;
			СтрокаМатериалы.Склад = ОсновнойСклад;
			СтрокаМатериалы.Количество = Строка.Количество;
			СтрокаМатериалы.КоличествоУпаковок = СтрокаМатериалы.Количество;
			СтрокаМатериалы.СтатьяКалькуляции = СтатьяКалькуляции;
			СтрокаМатериалы.НомерГруппыЗатрат = 1;
		КонецЦикла;
		ПроизводствоБезЗаказаОбъект.Записать();
		Производство.Добавить(ПроизводствоБезЗаказаОбъект.Ссылка);
	КонецЕсли;
	
	Возврат Производство;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтатьяКалькуляции()
	
	СтатьяКалькуляции = Справочники.СтатьиКалькуляции.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиКалькуляции.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СтатьиКалькуляции КАК СтатьиКалькуляции
		|ГДЕ
		|	СОКРЛП(СтатьиКалькуляции.ИдентификаторДляФормул) = &Код";
	
	Запрос.УстановитьПараметр("Код", "000000041");
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		СтатьяКалькуляции = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат СтатьяКалькуляции;
	
КонецФункции

&НаКлиенте
Процедура ПриАктивизацииСтрокиСписокЗаказов1С()
	
	ТекущиеДанные = Элементы.СписокЗаказов1С.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ОтборСтрок = Новый ФиксированнаяСтруктура("ИдЗаказаITokna", ТекущиеДанные.ИдЗаказаITokna);
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура("ИдЗаказаITokna", Неопределено);
	КонецЕсли;
	
	Элементы.Реализации.ОтборСтрок = ОтборСтрок;
	Элементы.ПроизводствоБезЗаказа.ОтборСтрок = ОтборСтрок;
		
КонецПроцедуры

&НаСервере
Функция ПакетДокументов()
	
	// Параметры для запуска фонового задания
	ПараметрыВыполненияФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияФункции(УникальныйИдентификатор);
	ПараметрыВыполненияФоновогоЗадания.ОжидатьЗавершение = 0;
	ПараметрыВыполненияФоновогоЗадания.ЗапуститьВФоне = Истина;
	
	ПараметрыОбработкиЗагрузки = Новый Структура;
	ПараметрыОбработкиЗагрузки.Вставить("ИдентификаторКоманды", "СоздатьПакетДокументов");
	ПараметрыОбработкиЗагрузки.Вставить("ДанныеСоздания", Неопределено);
	
	ИмяФункцииФоновогоЗадания = "Обработки.ИнтеграцияITOkna.ПакетДокументов";
	
	// Запуск фонового выполнения дополнительной обработки
	Результат = ДлительныеОперации.ВыполнитьФункцию(ПараметрыВыполненияФоновогоЗадания,
	ИмяФункцииФоновогоЗадания, ПараметрыОбработкиЗагрузки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ФильтрПриИзмененииКлиент(Знач ФильтрПараметр)
	
	МассивИд = СписокЗаказов.Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	
	Если ФильтрПараметр = 0 Тогда
		//МассивИд = СписокЗаказов.Выгрузить().ВыгрузитьКолонку("УникальныйИдентификатор");
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗаказКлиента.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
		|	ЗаказКлиента.Проведен КАК Проведен
		|ПОМЕСТИТЬ Заказы
		|ИЗ
		|	Документ.ЗаказКлиента КАК ЗаказКлиента
		|ГДЕ
		|	ЗаказКлиента.ИдЗаказаITOkna В(&МассивИд)
		|	И ВЫБОР
		|			КОГДА &Фильтр = 2
		|				ТОГДА ЗаказКлиента.Проведен
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеализацияТоваровУслуг.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
		|	РеализацияТоваровУслуг.Проведен КАК Проведен
		|ПОМЕСТИТЬ Реализации
		|ИЗ
		|	Заказы КАК Заказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ПО Заказы.ИдЗаказаITOkna = РеализацияТоваровУслуг.ИдЗаказаITOkna
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Заказы.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
		|	МИНИМУМ(ПроизводствоБезЗаказа.Проведен) КАК Проведен
		|ПОМЕСТИТЬ ПроизводствоБезЗаказа
		|ИЗ
		|	Заказы КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
		|		ПО Заказы.ИдЗаказаITOkna = ПроизводствоБезЗаказа.ИдЗаказаITOkna
		|
		|СГРУППИРОВАТЬ ПО
		|	Заказы.ИдЗаказаITOkna
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Заказы.ИдЗаказаITOkna КАК ИдЗаказаITOkna,
		|	Заказы.Проведен КАК ПроведенЗаказ,
		|	ПроизводствоБезЗаказа.Проведен КАК ПроведенПроизводство,
		|	ВЫБОР
		|		КОГДА Реализации.Проведен ЕСТЬ NULL
		|			ТОГДА ВЫБОР
		|					КОГДА &Фильтр = 1
		|						ТОГДА ЛОЖЬ
		|					КОГДА &Фильтр = 2
		|						ТОГДА ИСТИНА
		|				КОНЕЦ
		|		ИНАЧЕ Реализации.Проведен
		|	КОНЕЦ КАК ПроведенРеализация
		|ПОМЕСТИТЬ Итог
		|ИЗ
		|	Заказы КАК Заказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Реализации КАК Реализации
		|		ПО Заказы.ИдЗаказаITOkna = Реализации.ИдЗаказаITOkna
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
		|		ПО Заказы.ИдЗаказаITOkna = ПроизводствоБезЗаказа.ИдЗаказаITOkna
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Итог.ИдЗаказаITOkna КАК ИдЗаказаITOkna
		|ИЗ
		|	Итог КАК Итог
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &Фильтр = 1
		|				ТОГДА НЕ Итог.ПроведенЗаказ
		|						ИЛИ НЕ Итог.ПроведенПроизводство
		|						ИЛИ НЕ Итог.ПроведенРеализация
		|			КОГДА &Фильтр = 2
		|				ТОГДА Итог.ПроведенЗаказ
		|						И Итог.ПроведенПроизводство
		|						И Итог.ПроведенРеализация
		|		КОНЕЦ";
		
		Запрос.УстановитьПараметр("Фильтр", ФильтрПараметр);
		Запрос.УстановитьПараметр("МассивИд", МассивИд);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		МассивИд = Новый Массив;
		Пока Выборка.Следующий() Цикл
			МассивИд.Добавить(Выборка.ИдЗаказаITOkna);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокЗаказов1С.Параметры.УстановитьЗначениеПараметра("МассивИд", МассивИд);
	
	Элементы.СписокЗаказов1С.Обновить();
	
КонецФункции

&НаСервере
Функция ОтразитьДокументВРеглУчетеСервер(Документ)
	
	СтруктураРеквизиты = Новый Структура("Ссылка, Дата, Организация", Документ, НачалоДня(ТекущаяДатаСеанса()), Документ.Организация);
	
	ВыполняемыйМетод = "РеглУчетПроведениеСервер.ОтразитьДокументВФоне";
	
	НаименованиеЗадания = СтрШаблон(НСтр("ru = 'Актуализация проводок документа ""%1""'"), Документ);
	НаименованиеЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НаименованиеЗадания, Строка(Документ));
	
	ПараметрыФоновогоЗадания = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыФоновогоЗадания.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	ПараметрыФоновогоЗадания.КлючФоновогоЗадания = Документ.УникальныйИдентификатор();
	ПараметрыФоновогоЗадания.ЗапуститьВФоне = Истина;
	ПараметрыФоновогоЗадания.ОжидатьЗавершение = 1;
	
	ПараметрыОбработки = Новый Структура("РеквизитыДокумента, ВыполнитьПересчеты", СтруктураРеквизиты, Истина);
	ПараметрыОбработки.Вставить("ДетализацияПроводок", Ложь);
	РезультатФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыОбработки, ПараметрыФоновогоЗадания);
	РезультатФоновогоЗадания.Вставить("ВыводитьПрогрессВыполнения", Ложь);
	РезультатФоновогоЗадания.Вставить("ВыводитьСообщения", Ложь);
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаСервере
Процедура УдалитьДокументНаСервере(ДокументСсылка)
	
	ЗаказОбъект = ДокументСсылка.ПолучитьОбъект();
	Если ЗаказОбъект.Проведен Тогда
		ЗаказОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЕсли;
	
	СписокСсылок = Новый Массив;
	СписокСсылок.Добавить(ДокументСсылка);
	
	НайденныеСсылки = НайтиПоСсылкам(СписокСсылок);
	Для Каждого Строка Из НайденныеСсылки Цикл
		Если Метаданные.РегистрыСведений.Найти(Строка.Метаданные.Имя) <> Неопределено Тогда
			МенеджерЗаписи = РегистрыСведений[Строка.Метаданные.Имя].СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка.Данные);
			МенеджерЗаписи.Удалить();
		КонецЕсли;
		Если Метаданные.Документы.Найти(Строка.Метаданные.Имя) <> Неопределено Тогда
			ДокументОбъект = Строка.Данные.ПолучитьОбъект();
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			КонецЕсли;
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Удалить();
		КонецЕсли;
		Если Метаданные.Справочники.Найти(Строка.Метаданные.Имя) <> Неопределено Тогда
			СправочникОбъект = Строка.Данные.ПолучитьОбъект();
			СправочникОбъект.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроизводствоБезЗаказа.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроизводствоБезЗаказа КАК ПроизводствоБезЗаказа
		|ГДЕ
		|	ПроизводствоБезЗаказа.ИдЗаказаITOkna = &ИдЗаказаITOkna";
	
	Запрос.УстановитьПараметр("ИдЗаказаITOkna", ЗаказОбъект.ИдЗаказаITOkna);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокументПроизводстваОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ДокументПроизводстваОбъект.Проведен Тогда
			ДокументПроизводстваОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		ДокументПроизводстваОбъект.ОбменДанными.Загрузка = Истина;
		ДокументПроизводстваОбъект.Удалить();
	КонецЦикла;
	
	ЗаказОбъект.ОбменДанными.Загрузка = Истина;
	ЗаказОбъект.Удалить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоменклатураITOkna(Знач Артикул, Знач Наименование)
	
	СтруктураНоменклатуры = Новый Структура;
	СтруктураНоменклатуры.Вставить("Номенклатура");
	СтруктураНоменклатуры.Вставить("НеЗагружать");
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА IT_Okna_СоответствиеНоменклатуры.НеЗагружать
		|			ТОГДА &Артикул
		|		ИНАЧЕ IT_Okna_СоответствиеНоменклатуры.Номенклатура1С
		|	КОНЕЦ КАК Номенклатура,
		|	IT_Okna_СоответствиеНоменклатуры.НеЗагружать КАК НеЗагружать
		|ИЗ
		|	РегистрСведений.IT_Okna_СоответствиеНоменклатуры КАК IT_Okna_СоответствиеНоменклатуры
		|ГДЕ
		|	(IT_Okna_СоответствиеНоменклатуры.АртикулITOkna = &Артикул
		|			ИЛИ IT_Okna_СоответствиеНоменклатуры.НаименованиеITOkna = &Наименование)";
	
	Запрос.УстановитьПараметр("Артикул", Артикул);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураНоменклатуры, Выборка);
	КонецЦикла;
	
	Возврат СтруктураНоменклатуры;

КонецФункции

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура НастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПрогрессВыполнения(ДанныеПрогресса, ДополнительныеПараметры) Экспорт
	
	// Здесь обновляем шкалу прогресса
	Если ДанныеПрогресса.Прогресс = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПрогрессВыполнения = ДанныеПрогресса.Прогресс.Процент;
	СообщениеПрогресса = ДанныеПрогресса.Прогресс.Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииЗагрузки(Задание, ДополнительныеПараметры) Экспорт
	
	// А здесь оповещаем о завершении фонового задания
	Если Задание.Статус = "Выполнено" Тогда 
		
		ПоказатьПредупреждение(, НСтр("ru = 'Загрузка завершена'"), 20);
		Возврат;
		
	ИначеЕсли Задание.Статус = "Ошибка" Тогда 
		ВызватьИсключение Задание.ПодробноеПредставлениеОшибки;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборСоответствияКонтрагентовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Соответствие") Тогда
		Для Каждого Параметр Из Результат Цикл
			СтруктураПараметров = ДополнительныеПараметры.ПараметрыСозданияДокументов.Получить(Параметр.Ключ);
			СтруктураПараметров.Клиент = Параметр.Значение;
		КонецЦикла;
		ИмпортЗаказовКлиентПродолжение(ДополнительныеПараметры.ПараметрыСозданияДокументов);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументЗавершение(Результат, ЗаказСсылка) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УдалитьДокументНаСервере(ЗаказСсылка);
		ЗаполнитьДокументыСервер();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

